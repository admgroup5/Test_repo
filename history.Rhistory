library(readxl)
library(tidyverse)
# Import dataset for ADMP, specify range and give appropriate name
population <- read_csv("~/Dropbox/ADM Group Assessment/The Development/Structed Data/Population 2.0.csv")
childcare <- read_excel("~/Dropbox/ADM Group Assessment/The Development/Education_Childcare_dataset_as_at_31_March_2018_new (version 1).xlsx", sheet = "Childcare_providers")
childcare2 <- read_csv("~/Dropbox/ADM Group Assessment/The Development/Structed Data/facilities.csv")
housing <- read_csv("~/Dropbox/ADM Group Assessment/The Development/Structed Data/housing.csv")
View(childcare)
View(childcare2)
# Filter new view example
childcare %>% filter(`Provider type`== 'Childminder', `Provider URN` == 'EY554606')
# Filter new view example
x <- childcare %>% filter(`Provider type`== 'Childminder', `Provider URN` == 'EY554606')
View(x)
rm(x)
#change column format
childcare$`Registration date` <- format(as.Date(childcare$`Registration date`), "%d/%m/%Y")
###########################################################################
###########################################################################
#cleaning childcare dataset
#2) convert Excel numeric date data to correct date format in R
childcare$`Registration date` <- as.POSIXct(as.numeric(as.character(dchildcare$`Registration date`)), origin = "1899-12-30")
###########################################################################
###########################################################################
#cleaning childcare dataset
#2) convert Excel numeric date data to correct date format in R
childcare$`Registration date` <- as.POSIXct(as.numeric(as.character(childcare$`Registration date`)), origin = "1899-12-30")
#change column format
childcare$`Registration date` <- format(as.Date(childcare$`Registration date`), "%d/%m/%Y")
childcare$`Registration date` <- as.Date(childcare$`Registration date`, origin = "1899-12-30")
#change column format
childcare$`Registration date` <- format(as.Date(childcare$`Registration date`), "%d/%m/%Y")
rm childcare
rm (childcare)
childcare <- read_excel("~/Dropbox/ADM Group Assessment/The Development/Education_Childcare_dataset_as_at_31_March_2018_new (version 1).xlsx", sheet = "Childcare_providers")
library(readxl)
childcare <- read_excel("~/Dropbox/ADM Group Assessment/The Development/Education_Childcare_dataset_as_at_31_March_2018_new (version 1).xlsx",
sheet = "Childcare_providers", col_types = c("text",
"text", "text", "text", "date", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"numeric", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text"))
View(childcare)
View(childcare)
savehistory("~/Desktop/ADMP/history.Rhistory")
library(dplyr)
library(readr)
library(readxl)
population <- read_csv("~/Dropbox/ADM Group Assessment/The Development/Structed Data/Population 2.0.csv")
#childcare <- read_excel("~/Dropbox/ADM Group Assessment/The Development/Education_Childcare_dataset_as_at_31_March_2018_new (version 1).xlsx", sheet = "Childcare_providers")
childcare <- read_excel("~/Dropbox/ADM Group Assessment/The Development/Education_Childcare_dataset_as_at_31_March_2018_new (version 1).xlsx",sheet = "Childcare_providers", col_types = c("text","text", "text", "text", "date", "text","text", "text", "text", "text", "text","text", "text", "text", "text", "text","text", "text", "text", "text", "text","numeric", "text", "text", "text","text", "text", "text", "text", "text","text", "text", "text", "text", "text","text", "text", "text", "text"))
childcare2 <- read_csv("~/Dropbox/ADM Group Assessment/The Development/Structed Data/facilities.csv")
housing <- read_csv("~/Dropbox/ADM Group Assessment/The Development/Structed Data/housing.csv")
install.packages(c("boot", "class", "foreign", "lattice", "MASS", "nlme", "nnet", "survival"))
class(childcare)
dim(childcare)
View(childcare)
names(childcare)
str(childcare)
glimpse(childcare)
str(childcare)
hist(childcare)
hist(childcare$`Registration date`)
hist(childcare$(format(as.double.POSIXlt(childcare$`Registration date`)))
hist(childcare$(format(as.double.POSIXlt(childcare$`Registration date`))
hist(childcare$(format(as.double.POSIXlt(childcare$`Registration date`)))
hist(childcare$(format(as.double.POSIXlt(childcare$`Registration date`))))
hist(childcare$`Registration date`)
library(tidyverse)
separate(childcare,'Registration date', c('date', 'time'))
View(childcare)
View(childcare)
separate(childcare,'Registration date', c('date', 'time'), sep = ' ')
view(childcare$`Registration date`)
childcare3 <- separate(childcare,'Registration date', c('date', 'time'), sep = ' ')
view(childcare3$date)
view(childcare3)
View(childcare3)
View(housing)
View(housing)
install.packages("arules")
library(arules)
childcare %>% filter(`Local Authority`==c(Bolton))
childcare %>% filter(`Local Authority`==c(Thurrock))
childcare %>% filter(`Local Authority`==c('Thurrock'))
x <- childcare %>% filter(`Local Authority`==c('Thurrock'))
View(x)
x <- childcare %>% filter(`Local Authority`==c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
names(x)
glimpse(x)
x2 <- x[,c(2:7,13,14,21,22)]
View(x2)
complete.cases(x2)
rm(childcare2, childcare3)
x3 <- separate(x2,'Registration date', c('date', 'time'), sep = ' ')
View(x3)
x4 <- select(x2, -time)
rlang::last_error()
View(x2)
x2 <- x[c(2:7,13,14,21,22)]
x2 <- x[c(2:7,13,14,21,22)]
View(x2)
View(x3)
x4 <- x3[c(1:4,6:11)]
View(x4)
View(x4)
test <- x4
test$`Registration date` <- format(as.Date(childcare$`Registration date`), "%d/%m/%Y")
View(test)
test$`Registration date` <- format(as.Date(test$`Registration date`), "%d/%m/%Y")
test$date <- format(as.Date(test$date), "%d/%m/%Y")
View(x4)
View(test)
View(x4)
rm(test)
View(x4)
x4$date <- format(as.Date(x4$date), "%d/%m/%Y")
View(x4)
View(x4)
names(x4)
names(x4)
counts <- table(x4$`Provider URN`, useNA ="ifany")
view(counts)
counts <- table(x4$`Registered Person URN`, useNA ="ifany")
view(counts)
counts <- table(x4$`Registered Person Name`, useNA ="ifany")
view(counts)
counts <- table(x4$date, useNA ="ifany")
counts <- table(x4$date, useNA ="ifany")
view(counts)
counts <- table(x4$`Provider type`, useNA ="ifany")
view(counts)
counts <- table(x4$`Provider name`, useNA ="ifany")
view(counts)
counts <- table(x4$`Local Authority`, useNA ="ifany")
view(counts)
counts <- table(x4$`Parliamentary constituency`, useNA ="ifany")
view(counts)
counts <- table(x4$`Registered places`, useNA ="ifany")
view(counts)
counts <- table(x4$`Registered places including estimates`, useNA ="ifany")
view(counts)
rm(counts)
View(x4)
counts <- table(x4$`Registered Person URN`, useNA ="ifany")
view(counts)
test <- x4 %>% filter(`Registered Person URN`==c('Null'))
test <- x4 %>% filter(`Registered Person URN`=!Null)
test <- x4 %>% filter(`Registered Person URN`=!=Null)
test <- x4 %>% filter(`Registered Person URN`!=Null)
test <- x4 %>% filter(`Registered Person URN`!=NULL)
test <- x4 %>% filter(`Registered Person URN`!='NULL')
view(test)
cleanedcare <- test
# save cleaned dataset as a csv file
write.csv(cleanedcare, "cleanedcare.csv")
# remove the nulls and view
test <- x4 %>% filter(`Registered Person URN`!='NULL', `Registered places`!='NULL')
View(test)
# rename your cleaned data
cleanedcare <- test
# save cleaned dataset as a csv file
write.csv(cleanedcare, "cleanedcare.csv")
# save cleaned dataset as a csv file
write.csv(cleanedcare, "cleanedcare.csv")
# checks
complete.cases(cleanedcare)
cleanedcare[,NonNum]
NonNum<- unlist(lapply(cleanedcare, is.numeric))
view(NonNum)
View(cleanedcare)
View(cleanedcare)
#checking for null in the object
is.null(cleanedcare)
#checking missing values
summary(cleanedcare)
#checking for null in the object
is.null(cleanedcare)
cleanedcare[,NonChar]
# cleanedcare[,NonNum]
# checking Non character values
NonChar<- unlist(lapply(cleanedcare, is.character))
view(NonChar)
str(cleanedcare)
# remove the nulls and view separate thing
test2 <- x4 %>% filter(`Registered places`!='NULL')
View(test2)
test3 <- test2[c(1,4:)]
test3 <- test2[c(1,4:10)]
View(test3)
# rename your cleaned data
cleanedcare2 <- test3
write.csv(cleanedcare2, "cleanedcare2.csv")
View(x2)
savehistory("~/Desktop/ADMP/history.Rhistory")
tree <- as.Node(childcare)
names(cleanedcare2)
names(cleanedcare)
cleanedcare2 %>%
rename(date = 'Registration date')
library(dplyr)
cleanedcare2 %>%
rename(date = 'Registration date')
cleanedcare2 %>%
rename('Registration date' = date)
View(cleanedcare2)
# rename your cleaned data
cleanedcare2 <- test3
View(cleanedcare2)
View(cleanedcare)
library(tidyverse)
View(cleanedcare2)
View(childcare)
names(cleanedcare2)[2] <- "Registration date"
# rename your cleaned data
cleanedcare <- test
View(cleanedcare)
# rename some columns
names(cleanedcare)[4] <- "Registration date"
names(cleanedcare2)
View(x)
names(x)
x2 <- x[c(2,5,6,7,13,16,21)]
View(x2)
x3 <- separate(x2,'Registration date', c('date', 'time'), sep = ' ')
View(x3)
View(x3)
x4 <- x3[c(1,2,4:8)]
View(x4)
x4$date <- format(as.Date(x4$date), "%d/%m/%Y")
View(x4)
x4 <- x3[c(1,2,4:8)]
View(x4)
x4$date <- format(as.Date(x4$date), "%d/%m/%Y")
# check the column names
names(x4)
counts <- table(x4$Region, useNA ="ifany")
view(counts)
View(x4)
# remove the nulls and view separate thing
test <- x4 %>% filter(`Registered places`!='NULL')
rm(test2, test3)
# remove the nulls and view separate thing
test <- x4 %>% filter(`Registered places`!='NULL')
View(test)
# rename your cleaned data
cleanedcare <- test
rm(cleanedcare2)
# rename your cleaned data
cleanedcare <- test
View(cleanedcare)
# rename some columns
names(cleanedcare)[2] <- "Registration date"
names(x4)
counts <- table(cleanedcare$`Provider URN`, useNA ="ifany")
view(counts)
counts <- table(cleanedcare$`Registration date`, useNA ="ifany")
view(counts)
counts <- table(cleanedcare$`Provider type`, useNA ="ifany")
view(counts)
counts <- table(cleanedcare$`Provider name`, useNA ="ifany")
view(counts)
counts <- table(cleanedcare$`Local Authority`, useNA ="ifany")
view(counts)
counts <- table(cleanedcare$Region, useNA ="ifany")
view(counts)
test <- x4 %>% filter(`Registered places`!='NULL')
view(test)
# save cleaned dataset as a csv file
write.csv(cleanedcare, "cleanedcare.csv")
savehistory("~/Desktop/ADMP/history.Rhistory")
View(population)
# Import dataset for ADMP, specify range and give appropriate name
population <- read_csv("~/Dropbox/ADM Group Assessment/The Development/Structed Data/Population 2.0.csv")
library(dplyr)
library(readr)
library(readxl)
library(tidyverse)
# Import dataset for ADMP, specify range and give appropriate name
population <- read_csv("~/Dropbox/ADM Group Assessment/The Development/Structed Data/Population 2.0.csv")
View(population)
rm(population)
population <- read_csv("~/Dropbox/ADM Group Assessment/The Development/Structed Data/Population 2.0.csv")
View(population)
# rename some columns
names(population)[1] <- "Local authority"
names(population)[2] <- "Local authority code"
population <- population[c(2,1,3,4,5,6,7,8,9,10)]
View(population)
# remove unnecessary columns
population <- population[c(1,2,3,5,6,7,8,9,10)]
names(population)
# create a key(to be called'year') for the years and a new column
# for the values as the dataset is unneccesarily wide
test <- gather (population, year, 'count', -'Local authority code', -'Local authority', -'Age')
# create a key(to be called'year') for the years and a new column
# for the values as the dataset is unneccesarily wide
poptest <- gather (population, year, 'count', -'Local authority code', -'Local authority', -'Age')
# remove the nulls
test <- x4 %>% filter(`Registered places`!='NULL')
View(test)
View(poptest)
View(population)
rm(poptest)
# create a key(to be called'year') for the years and a new column
# for the values as the dataset is unneccesarily wide
population <- gather (population, year, 'count', -'Local authority code', -'Local authority', -'Age')
population <- read_csv("~/Dropbox/ADM Group Assessment/The Development/Structed Data/Population 2.0.csv")
names(population)[1] <- "Local authority"
names(population)[2] <- "Local authority code"
population <- read_csv("~/Dropbox/ADM Group Assessment/The Development/Structed Data/Population 2.0.csv")
View(population)
# rename some columns
names(population)[1] <- "Local authority"
names(population)[2] <- "Local authority code"
View(population)
# change the order of the columns
population <- population[c(2,1,3,4,5,6,7,8,9,10)]
# remove unnecessary columns
pop2 <- population[c(1,2,3,5,6,7,8,9,10)]
View(pop2)
# create a key(to be called'year') for the years and a new column
# for the values as the dataset is unneccesarily wide
cleanpop <- gather (pop2, year, 'count', -'Local authority code', -'Local authority', -'Age')
View(cleanpop)
View(population)
View(population)
population <- read_csv("~/Dropbox/ADM Group Assessment/The Development/Structed Data/Population 2.0.csv")
# create new version to clean
pop2 <- population
names(pop2)[1] <- "Local authority"
names(pop2)[2] <- "Local authority code"
# change the order of the columns
pop2 <- pop2[c(2,1,3,4,5,6,7,8,9,10)]
# remove unnecessary columns
pop3 <- pop2[c(1,2,3,5,6,7,8,9,10)]
# create a key(to be called'year') for the years and a new column
# for the values as the dataset is unneccesarily wide
cleanpop <- gather (pop3, year, 'count', -'Local authority code', -'Local authority', -'Age')
View(cleanpop)
View(population)
View(pop2)
View(pop2)
View(pop3)
View(pop2)
View(pop3)
View(pop2)
View(population)
View(pop2)
View(pop3)
View(cleanpop)
View(cleanpop)
testing <- pop3
testing <- cleanpop
testing$month
View(testing)
testing[,"month"] <- NA
# change the order so month is next to the year
testing2 <- testing[c(1,2,3,4,6,5)]
View(testing2)
View(testing2)
# Assign name "NA" to the empty values(all values) within the month object
names(testing2)[is.na(names(testing2))] <- "NA"
View(testing2)
# change the order so month is next to the year
testing2 <- testing[c(1,2,3,4,6,5)]
View(testing)
View(testing2)
# change the data type to character
testing2$month <- as.character(testing2$month)
View(testing2)
# Assign name "NA" to the empty values(all values) within the month object
names(testing2)[is.na(names(testing2))] <- "NA"
View(testing2)
# create a key(to be called'year') for the years and a new column
# for the values as the dataset is unneccesarily wide
pop4 <- gather (pop4, year, 'count', -'Local authority code', -'Local authority', -'Age')
# create a key(to be called'year') for the years and a new column
# for the values as the dataset is unneccesarily wide
pop4 <- gather (pop3, year, 'count', -'Local authority code', -'Local authority', -'Age')
# Introduce month column with empty values
testing <- pop4
View(testing2)
rm(testing, testing2)
# Introduce month column with empty values
pop4[,"month"] <- NA
View(pop4)
# change the order so month is next to the year
pop5 <- pop4[c(1,2,3,4,6,5)]
View(pop5)
# change the data type to character
pop5$month <- as.character(pop5$month)
View(pop5)
# Assign name "NA" to the empty values(all values) within the month object
names(pop5)[is.na(names(pop5))] <- "NA"
View(pop5)
# your clean data
cleanpop <- pop5
# save cleaned dataset as a csv file
write.csv(cleanpop, "cleanpop.csv")
View(childcare)
housing <- read_csv("~/Dropbox/ADM Group Assessment/The Development/Structed Data/housing.csv")
View(housing)
View(housing)
# rename some columns
names(housing)[3] <- "Local authority"
###########################################################################
###########################################################################
# *****housing****
housing <- read_csv("~/Dropbox/ADM Group Assessment/The Development/Structed Data/housing.csv")
View(housing)
# rename some columns
names(housing)[4] <- "Local authority"
View(cleanedcare)
View(cleanpop)
View(housing)
View(pop3)
names(housing)
# create a key(to be called'date') for the dates and a new column
# for the number of houses called 'new houses' as the dataset is unneccesarily wide
house3 <- gather (house2, Date, 'new houses', -'Region/Country code', -'Region/Country name', -'Local authority code', -'Local authority')
# filter out unwanted local authorities
house <- housing %>% filter(`Local authority`==c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
View(house)
counts <- table(house$`Local authority`, useNA ="ifany")
view(counts)
counts <- table(housing$`Local authority`, useNA ="ifany")
view(counts)
# filter out unwanted local authorities
house <- housing %>% filter(`Local authority`==c("Bolton", 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
# filter out unwanted local authorities
house <- housing %>% filter(`Local authority`==c("Bolton", 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
View(house)
# filter out unwanted local authorities
house <- housing %>% filter(`Local authority`==c("'Bolton'", 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
house <- housing %>% filter(`Local authority`==c('Manchester', 'Oldham', 'Salford', 'Tameside', 'Wigan'))
house <- housing %>% filter(`Local authority`==c('Manchester', 'Oldham', 'Salford', 'Tameside', 'Wigan'))
View(house)
# filter out unwanted local authorities
house <- housing %>% filter(`Local authority`==c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
counts <- table(housing$`Local authority`, useNA ="ifany")
view(counts)
house <- housing %>% filter(`Local authority`== c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
house <- housing %>% filter(`Local authority`== c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
View(house)
house <- housing %>% filter(`Local authority`== c(Bolton, Bury))
view(counts)
house <- housing %>% filter(`Local authority`== c(Rochdale, Bury))
house <- housing %>% filter(`Local authority`== c('Rochdale', 'Bury'))
# its only coming up with one out of 10 local authorities so find out why
counts <- table(housing$`Local authority`, useNA ="ifany")
house <- housing %>% filter(`Local authority`== c('Rochdale', 'Bury'))
View(house)
houses <- housing
y <-
# create a key(to be called'date') for the dates and a new column
# for the number of houses called 'new houses' as the dataset is unneccesarily wide
houses2 <- gather (houses, Date, 'new houses', -'Region/Country code', -'Region/Country name', -'Local authority code', -'Local authority')
View(houses2)
y <- housing %>% filter(`Local authority code`== c('E08000001', 'E08000002', 'E08000003', 'E08000004', 'E08000005', 'E08000006', 'E08000007', 'E08000008', 'E08000009', 'E08000010'))
View(housing)
View(y)
rm(y)
View(houses)
View(houses2)
#checking missing values
summary(houses2)
#checking for null in the object
is.null(houses2)
# checking Non character values
NonChar<- unlist(lapply(houses2, is.character))
NonNum<- unlist(lapply(houses2, is.numeric))
view(NonNum)
# checking Non numeric values
'isitnumeric?'<- unlist(lapply(houses2, is.numeric))
'isitnumeric?'<- unlist(lapply(houses2, is.numeric))
view(`isitnumeric?`)
# checking Non character values
'isitcharacter?'<- unlist(lapply(houses2, is.character))
view(`isitcharacter?`)
View(houses)
View(houses2)
y <- houses2 %>% filter(`Local authority code`== c('E08000001', 'E08000002', 'E08000003', 'E08000004', 'E08000005', 'E08000006', 'E08000007', 'E08000008', 'E08000009', 'E08000010'))
View(y)
y <- houses2 %>% filter(`Local authority`== c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
View(y)
View(y)
rm(house)
# try with the codes instead
y <- housing %>% filter(`Local authority code`== c('E08000001', 'E08000002', 'E08000003', 'E08000004', 'E08000005', 'E08000006', 'E08000007', 'E08000008', 'E08000009', 'E08000010'))
###########################################################################
# this bit is still not working
###########################################################################
# filter out unwanted local authorities
y <- housing %>% filter(`Local authority`== c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
View(y)
View(housing)
View(housing)
View(housing)
y <- houses2 %>% filter(`Local authority code`== c('E08000001', 'E08000002', 'E08000003', 'E08000004', 'E08000005', 'E08000006', 'E08000007', 'E08000008', 'E08000009', 'E08000010'))
y <- houses2 %>% filter(`Local authority`== c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
View(y)
###########################################################################
###########################################################################
#clear housing data
rm(houses,houses2,housing,y)
savehistory("~/Desktop/ADMP/history.Rhistory")
savehistory("~/Desktop/Test_repo/history.Rhistory")
