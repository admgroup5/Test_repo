View(pop3)
View(pop2)
View(population)
View(pop2)
View(pop3)
View(cleanpop)
View(cleanpop)
testing <- pop3
testing <- cleanpop
testing$month
View(testing)
testing[,"month"] <- NA
# change the order so month is next to the year
testing2 <- testing[c(1,2,3,4,6,5)]
View(testing2)
View(testing2)
# Assign name "NA" to the empty values(all values) within the month object
names(testing2)[is.na(names(testing2))] <- "NA"
View(testing2)
# change the order so month is next to the year
testing2 <- testing[c(1,2,3,4,6,5)]
View(testing)
View(testing2)
# change the data type to character
testing2$month <- as.character(testing2$month)
View(testing2)
# Assign name "NA" to the empty values(all values) within the month object
names(testing2)[is.na(names(testing2))] <- "NA"
View(testing2)
# create a key(to be called'year') for the years and a new column
# for the values as the dataset is unneccesarily wide
pop4 <- gather (pop4, year, 'count', -'Local authority code', -'Local authority', -'Age')
# create a key(to be called'year') for the years and a new column
# for the values as the dataset is unneccesarily wide
pop4 <- gather (pop3, year, 'count', -'Local authority code', -'Local authority', -'Age')
# Introduce month column with empty values
testing <- pop4
View(testing2)
rm(testing, testing2)
# Introduce month column with empty values
pop4[,"month"] <- NA
View(pop4)
# change the order so month is next to the year
pop5 <- pop4[c(1,2,3,4,6,5)]
View(pop5)
# change the data type to character
pop5$month <- as.character(pop5$month)
View(pop5)
# Assign name "NA" to the empty values(all values) within the month object
names(pop5)[is.na(names(pop5))] <- "NA"
View(pop5)
# your clean data
cleanpop <- pop5
# save cleaned dataset as a csv file
write.csv(cleanpop, "cleanpop.csv")
View(childcare)
housing <- read_csv("~/Dropbox/ADM Group Assessment/The Development/Structed Data/housing.csv")
View(housing)
View(housing)
# rename some columns
names(housing)[3] <- "Local authority"
###########################################################################
###########################################################################
# *****housing****
housing <- read_csv("~/Dropbox/ADM Group Assessment/The Development/Structed Data/housing.csv")
View(housing)
# rename some columns
names(housing)[4] <- "Local authority"
View(cleanedcare)
View(cleanpop)
View(housing)
View(pop3)
names(housing)
# create a key(to be called'date') for the dates and a new column
# for the number of houses called 'new houses' as the dataset is unneccesarily wide
house3 <- gather (house2, Date, 'new houses', -'Region/Country code', -'Region/Country name', -'Local authority code', -'Local authority')
# filter out unwanted local authorities
house <- housing %>% filter(`Local authority`==c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
View(house)
counts <- table(house$`Local authority`, useNA ="ifany")
view(counts)
counts <- table(housing$`Local authority`, useNA ="ifany")
view(counts)
# filter out unwanted local authorities
house <- housing %>% filter(`Local authority`==c("Bolton", 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
# filter out unwanted local authorities
house <- housing %>% filter(`Local authority`==c("Bolton", 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
View(house)
# filter out unwanted local authorities
house <- housing %>% filter(`Local authority`==c("'Bolton'", 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
house <- housing %>% filter(`Local authority`==c('Manchester', 'Oldham', 'Salford', 'Tameside', 'Wigan'))
house <- housing %>% filter(`Local authority`==c('Manchester', 'Oldham', 'Salford', 'Tameside', 'Wigan'))
View(house)
# filter out unwanted local authorities
house <- housing %>% filter(`Local authority`==c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
counts <- table(housing$`Local authority`, useNA ="ifany")
view(counts)
house <- housing %>% filter(`Local authority`== c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
house <- housing %>% filter(`Local authority`== c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
View(house)
house <- housing %>% filter(`Local authority`== c(Bolton, Bury))
view(counts)
house <- housing %>% filter(`Local authority`== c(Rochdale, Bury))
house <- housing %>% filter(`Local authority`== c('Rochdale', 'Bury'))
# its only coming up with one out of 10 local authorities so find out why
counts <- table(housing$`Local authority`, useNA ="ifany")
house <- housing %>% filter(`Local authority`== c('Rochdale', 'Bury'))
View(house)
houses <- housing
y <-
# create a key(to be called'date') for the dates and a new column
# for the number of houses called 'new houses' as the dataset is unneccesarily wide
houses2 <- gather (houses, Date, 'new houses', -'Region/Country code', -'Region/Country name', -'Local authority code', -'Local authority')
View(houses2)
y <- housing %>% filter(`Local authority code`== c('E08000001', 'E08000002', 'E08000003', 'E08000004', 'E08000005', 'E08000006', 'E08000007', 'E08000008', 'E08000009', 'E08000010'))
View(housing)
View(y)
rm(y)
View(houses)
View(houses2)
#checking missing values
summary(houses2)
#checking for null in the object
is.null(houses2)
# checking Non character values
NonChar<- unlist(lapply(houses2, is.character))
NonNum<- unlist(lapply(houses2, is.numeric))
view(NonNum)
# checking Non numeric values
'isitnumeric?'<- unlist(lapply(houses2, is.numeric))
'isitnumeric?'<- unlist(lapply(houses2, is.numeric))
view(`isitnumeric?`)
# checking Non character values
'isitcharacter?'<- unlist(lapply(houses2, is.character))
view(`isitcharacter?`)
View(houses)
View(houses2)
y <- houses2 %>% filter(`Local authority code`== c('E08000001', 'E08000002', 'E08000003', 'E08000004', 'E08000005', 'E08000006', 'E08000007', 'E08000008', 'E08000009', 'E08000010'))
View(y)
y <- houses2 %>% filter(`Local authority`== c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
View(y)
View(y)
rm(house)
# try with the codes instead
y <- housing %>% filter(`Local authority code`== c('E08000001', 'E08000002', 'E08000003', 'E08000004', 'E08000005', 'E08000006', 'E08000007', 'E08000008', 'E08000009', 'E08000010'))
###########################################################################
# this bit is still not working
###########################################################################
# filter out unwanted local authorities
y <- housing %>% filter(`Local authority`== c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
View(y)
View(housing)
View(housing)
View(housing)
y <- houses2 %>% filter(`Local authority code`== c('E08000001', 'E08000002', 'E08000003', 'E08000004', 'E08000005', 'E08000006', 'E08000007', 'E08000008', 'E08000009', 'E08000010'))
y <- houses2 %>% filter(`Local authority`== c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
View(y)
###########################################################################
###########################################################################
#clear housing data
rm(houses,houses2,housing,y)
savehistory("~/Desktop/ADMP/history.Rhistory")
savehistory("~/Desktop/Test_repo/history.Rhistory")
rm(list=ls())
###########################################################################
###########################################################################
# *****childcare****
# Import dataset for ADMP, specify range and give appropriate name
childcare <- read_excel("Education_Childcare_dataset_as_at_31_March_2018_new (version 1).xlsx",sheet = "Childcare_providers", col_types = c("text","text", "text", "text", "date", "text","text", "text", "text", "text", "text","text", "text", "text", "text", "text","text", "text", "text", "text", "text","numeric", "text", "text", "text","text", "text", "text", "text", "text","text", "text", "text", "text", "text","text", "text", "text", "text"))
# filter data to only show the local authorities we are interested in (the 10 below make up greater manchester)
x <- childcare %>% filter(`Local Authority`==c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
x2 <- filter(childcare, `Local Authority`==c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
# filter columns to show only the required columns
x2 <- x[c(2,5,6,7,13,16,21)]
# correct the dates to remove the time
x3 <- separate(x2,'Registration date', c('date', 'time'), sep = ' ')
View(x3)
# filter out the time column
x4 <- x3[c(1,2,4:8)]
View(x4)
View(x4)
# correct the order(appearance of the date column)
x4$date <- format(as.Date(x4$date), "%d/%m/%Y")
View(x4)
View(x4)
View(x4)
counts <- table(x4$`Registered places`, useNA ="ifany")
view(counts)
# Assign name "NA" to the missing values within the counts object
names(counts)[is.na(names(counts))] <- "NA"
# Display barplot
barplot(counts, main="Registered places", xlab='Counts', ylab=('Registered places')), horiz=TRUE)
# Display barplot
barplot(counts, main="Registered places", xlab='Counts', ylab=('Registered places'), horiz=TRUE)
test <- x4 %>% filter(`Registered places`!='NULL')
view(test)
# rename your cleaned data
cleanedcare <- test
# check the column names
names(cleanedcare)
# rename some columns
names(cleanedcare)[2] <- "Registration date"
View(cleanedcare)
# rename some columns
names(cleanedcare)[2,5] <- c("Registration date","Local authority")
View(cleanedcare)
# rename some columns
names(cleanedcare)[2] <- "Registration date"
names(cleanedcare)[5] <- "Local authority"
# save cleaned dataset as a csv file
write.csv(cleanedcare, "clean/cleanedcare.csv")
View(cleanedcare)
rm(x)
View(cleanedcare)
counts <- table(cleanedcare$Region, useNA ="ifany")
view(counts)
counts <- table(cleanedcare$`Local authority`, useNA ="ifany")
view(counts)
############# checks ##################
complete.cases(cleanedcare)
str(cleanedcare)
View(childcare)
counts <- table(cleanedcare$`Registration date`, useNA ="ifany")
view(counts)
#checking missing values
summary(cleanedcare)
#checking for null in the object
is.null(cleanedcare)
###########################################################################
###########################################################################
# *****Population****
population <- read_csv("Population 2.0.csv")
# create new version to clean
pop2 <- population
# rename some columns
names(pop2)[1] <- "Local authority"
names(pop2)[2] <- "Local authority code"
View(pop2)
# change the order of the columns
pop2 <- pop2[c(2,1,3,4,5,6,7,8,9,10)]
# remove unnecessary columns
pop3 <- pop2[c(1,2,3,5,6,7,8,9,10)]
View(pop2)
View(pop3)
# create a key(to be called'year') for the years and a new column
# for the values (called 'count')as the dataset is unneccesarily wide
pop4 <- gather (pop3, year, 'count', -'Local authority code', -'Local authority', -'Age')
View(pop4)
# Introduce month column with empty values
pop4[,"month"] <- NA
View(pop4)
# change the order so month is next to the year
pop5 <- pop4[c(1,2,3,4,6,5)]
# change the data type to character
pop5$month <- as.character(pop5$month)
View(pop4)
# change the data type to character
pop5$month <- as.character(pop5$month)
View(pop5)
# Assign name "NA" to the empty values(all values) within the month object
names(pop5)[is.na(names(pop5))] <- "NA"
# your clean data
cleanpop <- pop5
View(cleanpop)
# save cleaned dataset as a csv file
write.csv(cleanpop, "clean/cleanpop.csv")
############# checks ##################
complete.cases(cleanpop)
############# checks ##################
complete.cases(cleanedcare)
View(cleanpop)
# Assign name "NA" to the empty values(all values) within the month object
names(pop5)[is.na(names(pop5))] <- "null"
View(pop5)
# Assign name "NA" to the empty values(all values) within the month object
names(pop5)[is.na(names(pop5))] <- "nothing"
View(pop5)
# Assign name "NA" to the empty values(all values) within the month object
names(pop5)[is.na(names(pop5))] <- "not applicable"
View(pop5)
pop5$month <- sub("^$", "N/A", pop5$month)
View(pop5)
View(pop5)
pop5$month <- sub("NA^$", "N/A", pop5$month)
View(pop5)
pop5$month[pop5$month==""]<-"Null"
View(pop5)
pop5$month[pop5$month==""]<-"Null"
View(pop5)
pop5$month[pop5$month==is.NULL]<-"Null"
View(pop5)
pop5$month[pop5$month==NULL]<-"Null"
View(pop5)
# Assign name "NA" to the empty values(all values) within the month object
names(pop5)[is.null(names(pop5))] <- "not applicable"
View(pop5)
# Introduce month column with empty values
pop4[,"month"] <- NA
pop5 <- pop4
names(pop5)[is.null(names(pop5))] <- "not applicable"
View(pop5)
View(pop5)
pop5$month[pop5$month==""]<-"Null"
View(pop5)
pop5$month[pop5$month==NULL]<-"Null"
View(pop5)
pop5$month <- sub("NA^$", "N/A", pop5$month)
View(pop5)
pop5$month <- sub("^$", "N/A", pop5$month)
View(pop5)
pop5 <- pop4[c(1,2,3,4,6,5)]
View(pop5)
str(cleanpop)
tst <- c()
value <- c('none')
tst[1:361]<- unique(value)[1]
view(tst)
pop5$month <- tst
View(pop5)
tst[1:360]<- unique(value)[1]
pop5$month <- tst
tst <- c()
value <- c('none')
tst[1:360]<- unique(value)[1]
pop5$month <- tst
View(pop5)
# create a key(to be called'year') for the years and a new column
# for the values (called 'count')as the dataset is unneccesarily wide
pop4 <- gather (pop3, year, 'count', -'Local authority code', -'Local authority', -'Age')
# Introduce month column with empty values
pop4[,"month"] <- NA
# change the order so month is next to the year
pop5 <- pop4[c(1,2,3,4,6,5)]
# change the data type to character
pop5$month <- as.character(pop5$month)
tst <- c()
value <- c('none')
tst[1:360]<- unique(value)[1]
pop5$month <- tst
View(pop5)
# your clean data
cleanpop <- pop5
value <- c('N/A')
tst[1:360]<- unique(value)[1]
pop5$month <- tst
View(pop5)
# your clean data
cleanpop <- pop5
############# checks ##################
complete.cases(cleanpop)
# save cleaned dataset as a csv file
write.csv(cleanpop, "clean/cleanpop.csv")
###########################################################################
###########################################################################
# *****Population****
# Import dataset
population <- read_csv("raw data used/Population 2.0.csv")
checks <- read_excel("check codes/checks.xlsx")
View(checks)
check1 <- checks %>% filter(anthonia == c('manchester', 'trafford', 'bury'))
view(check1)
rm(check1, checks)
###########################################################################
###########################################################################
# *****housing****
# Import dataset
housing <- read_csv("raw data used/housing.csv")
View(housing)
# rename some columns
names(housing)[4] <- "Local authority"
###########################################################################
# this bit is still not working
###########################################################################
# filter out unwanted local authorities
y <- housing %>% filter(`Local authority`== c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
View(y)
y <- filter(housing, `Local authority`== c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
z <- filter(housing, `Local authority`== c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
rm(z)
houses <- housing
rm(houses)
# try with the codes instead
y <- housing %>% filter(`Local authority code`== c('E08000001', 'E08000002', 'E08000003', 'E08000004', 'E08000005', 'E08000006', 'E08000007', 'E08000008', 'E08000009', 'E08000010'))
###########################################################################
# this bit is still not working
###########################################################################
# filter out unwanted local authorities
y <- housing %>% filter(`Local authority`== c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
counts <- table(housing$`Local authority`, useNA ="ifany")
view(counts)
counts <- table(y$`Local authority`, useNA ="ifany")
view(counts)
View(housing)
# create a key(to be called'date') for the dates and a new column
# for the number of houses called 'new houses' as the dataset is unneccesarily wide
houses2 <- gather (houses, Date, 'new houses', -'Region/Country code', -'Region/Country name', -'Local authority code', -'Local authority')
# create a key(to be called'date') for the dates and a new column
# for the number of houses called 'new houses' as the dataset is unneccesarily wide
houses <- gather (y, Date, 'new houses', -'Region/Country code', -'Region/Country name', -'Local authority code', -'Local authority')
View(houses)
# create a key(to be called'date') for the dates and a new column
# for the number of houses called 'new houses' as the dataset is unneccesarily wide
houses <- gather (housing, Date, 'new houses', -'Region/Country code', -'Region/Country name', -'Local authority code', -'Local authority')
View(houses)
# try filtering again
z <- houses %>% filter(`Local authority code`== c('E08000001', 'E08000002', 'E08000003', 'E08000004', 'E08000005', 'E08000006', 'E08000007', 'E08000008', 'E08000009', 'E08000010'))
View(z)
View(housing)
y1 <- housing %>%
filter(`Region/Country name` == 'North West')
View(y1)
y2 <- y1 %>%
filter(`Local authority code`== c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
View(y1)
y2 <- y1%>%
filter(`Local authority code`== c('E08000001', 'E08000002', 'E08000003', 'E08000004', 'E08000005', 'E08000006', 'E08000007', 'E08000008', 'E08000009', 'E08000010'))
View(y2)
y2 <- y1 %>%
filter('Local authority code'== c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan'))
y2 <- y1 %>%
filter(`Local authority code`== tst2)
tst2 <- c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan')
y2 <- y1 %>%
filter(`Local authority code`== tst2)
rm(y2)
y2 <- y1 %>%
filter(`Local authority code`== tst2)
View(y1)
y2 <- y1 %>%
filter(`Local authority code` %in% tst2)
View(y2)
View(y1)
y2 <- y1 %>%
filter(`Local authority code`== Bolton)
y2 <- y1 %>%
filter(`Local authority code`== 'Bolton')
View(y2)
y2 <- y1 %>%
filter(`Local authority` %in% tst2)
y2 <- housing %>%
filter(`Local authority` %in% tst2)
rm(y,y1,z)
rm(y2)
###########################################################################
# this bit is still not working
###########################################################################
# filter out unwanted local authorities
tst2 <- c('Bolton', 'Bury', 'Manchester', 'Oldham', 'Salford', 'Tameside', 'Rochdale', 'Stockport', 'Trafford', 'Wigan')
y <- housing %>%
filter(`Local authority` %in% tst2)
View(y)
counts <- table(y$`Local authority`, useNA ="ifany")
view(counts)
houses <- gather (y, Date, 'new houses', -'Region/Country code', -'Region/Country name', -'Local authority code', -'Local authority')
View(houses)
############# checks ##################
complete.cases(houses2)
############# checks ##################
complete.cases(houses)
#checking for null in the object
is.null(houses)
cleanhouse <- houses
View(cleanhouse)
# save cleaned dataset as a csv file
write.csv(cleanhouse, "clean/cleanhouse.csv")
View(x2)
x2 <- childcare %>%
filter(`Local Authority`%in% tst2)
View(x2)
# filter columns to show only the required columns
x2 <- x[c(2,5,6,7,13,16,21)]
View(x2)
x <- childcare %>%
filter(`Local Authority`%in% tst2)
x2 <- x[c(2,5,6,7,13,16,21)]
x <- childcare %>%
filter(`Local Authority`%in% tst2)
x2 <- x[c(2,5,6,7,13,16,21)]
# correct the dates to remove the time
x3 <- separate(x2,'Registration date', c('date', 'time'), sep = ' ')
# filter out the time column
x4 <- x3[c(1,2,4:8)]
View(x4)
# correct the order(appearance of the date column)
x4$date <- format(as.Date(x4$date), "%d/%m/%Y")
counts <- table(x4$`Registered places`, useNA ="ifany")
view(counts)
test <- x4 %>% filter(`Registered places`!='NULL')
view(test)
# rename your cleaned data
cleanedcare <- test
# check the column names
names(cleanedcare)
# rename some columns
names(cleanedcare)[2] <- "Registration date"
names(cleanedcare)[5] <- "Local authority"
counts <- table(cleanedcare$`Provider URN`, useNA ="ifany")
view(counts)
View(cleanedcare)
############# checks ##################
complete.cases(cleanedcare)
# save cleaned dataset as a csv file
write.csv(cleanedcare, "clean/cleanedcare.csv")
View(cleanedcare)
#import dummy dataset
checks <- read_excel("check codes/checks.xlsx")
View(checks)
filtervector <- c('manchester', 'trafford', 'bury')
# Filter this to check if it works
check1 <- checks %>% filter(anthonia %in% filtervector)
view(check1)
savehistory("~/Desktop/Test_repo/history.Rhistory")
